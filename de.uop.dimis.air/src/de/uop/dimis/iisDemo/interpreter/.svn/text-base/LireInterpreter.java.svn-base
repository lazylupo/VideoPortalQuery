/**
 *
 *
 *
 *
 * @author  Christian Vilsmaier 2011-06-01
 *
 * Copyright statement:
 * --------------------
 * (c) 2011 by Christian Vilsmaier (Christian.Vilsmaier@me.com)
 *
 *
 *
 */

package de.uop.dimis.iisDemo.interpreter;


import de.uop.dimis.air.backendManagement.tools.MpqBuilder;
import de.uop.dimis.air.internalObjects.ResultTuple;
import de.uop.dimis.air.internalObjects.mpqf.MpegQueryType;
import de.uop.dimis.air.internalObjects.mpqf.OutputQueryType;
import de.uop.dimis.air.internalObjects.mpqf.QueryByMedia;
import de.uop.dimis.air.internalObjects.mpqf.ResultItemType;
import de.uop.dimis.air.internalObjects.mpqf.ResultItemType.MediaResource;
import de.uop.dimis.air.internalObjects.mpqf.ResultItemType.Thumbnail;
import de.uop.dimis.air.searchInterface.SearchInterface;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.IOException  ;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;

import javax.imageio.ImageIO;

import net.semanticmetadata.lire.DocumentBuilder;
import net.semanticmetadata.lire.DocumentBuilderFactory;
import net.semanticmetadata.lire.ImageSearchHits;
import net.semanticmetadata.lire.ImageSearcher;
import net.semanticmetadata.lire.ImageSearcherFactory;

import org.apache.lucene.analysis.SimpleAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.LockObtainFailedException;


/**
 * @author stegmai
 */
public class LireInterpreter implements SearchInterface {
	

    @Override
    public MpegQueryType execute(MpegQueryType qry) {
 
        byte[] imgBytes = ((QueryByMedia)qry.getQuery().getInput().getQueryCondition().getCondition()).getMediaResource().getMediaResource().getInlineMedia().getMediaData64();
        File fileII = new File("inputImage.jpeg");
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(fileII);

                fos.write(imgBytes);
                 fos.close();
            } catch (IOException ex) {
                Logger.getLogger(LireInterpreter.class.getName()).log(Level.SEVERE, null, ex);
            }     
       
        final String inputPicture = "inputImage.jpeg";
        final int numberrHits = 16;
        final String pathOfTheContent = qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[0]+"/";

        double weightSC = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[1]);
		double weightCL = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[2]);
		double weightEH = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[3]);
		double weightAC = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[4]);;
		double weightCEDD = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[5]);
		double weightFCTH = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[6]);
		double weightG = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[7]);
		double weightSH = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[8]);
		double weightT = Double.parseDouble(qry.getQuery().getInput().getServiceSelection().getServiceID().get(0).split("//")[9]);
		
		
		String superText = "";
		if (weightSC>0) {superText+="ScalableColor " + weightSC + ",";}
		if (weightCL>0) {superText+="ColorLayout " + weightCL + ",";}
		if (weightEH>0) {superText+="EdgeHistogram " + weightEH + ",";}
		if (weightAC>0) {superText+="AutoColorCorrelogram " + weightAC + ",";}
		if (weightCEDD>0) {superText+="CEDD " + weightCEDD + ",";}
		if (weightFCTH>0) {superText+="FCTH " + weightFCTH + ",";}
		if (weightG>0) {superText+="Gabor " + weightG + ",";}
		if (weightSH>0) {superText+="SimpleColorHistogram " + weightSH + ",";}
		if (weightT>0) {superText+="Tamura " + weightT + ",";}
	
		
		
		FilenameFilter filter = new FilenameFilter() {

			public boolean accept(File dir, String name) {
				return name.endsWith(".jpg");
			}
		};

		File file = new File(pathOfTheContent + "index/");
		if (!file.exists()) {
			System.out.println("Index will be written on \"" + pathOfTheContent + "index/\n");

			try {
				String[] CBIRsFiles = new File(pathOfTheContent).list(filter);
				// Create an appropriate DocumentBuilder
				DocumentBuilder builder = DocumentBuilderFactory.getFullDocumentBuilder();
				// That's the way it is done with Lucene 3.0 - supported with
				// LIRe
				// v0.8
				IndexWriter iw = new IndexWriter(FSDirectory.open(new File(pathOfTheContent + "/index/")), new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);
				for (String identifier : CBIRsFiles) {
					String a2 = pathOfTheContent + identifier;
					FileInputStream c = new FileInputStream(a2);
					Document doc = builder.createDocument(c, identifier);
					// System.out.println(doc.getField("descriptorScalableColor"));
					// Add the Documents to the index
					iw.addDocument(doc);
				}
				iw.optimize();
				iw.close();
			} catch (CorruptIndexException ex) {
				System.err.println("The Index appears to be corrupt: " + ex);
			} catch (LockObtainFailedException ex) {
				System.err.println("No lock obtained: " + ex);
			} catch (IOException ex) {
				System.err.println("IO-Exception: " + ex);
			}
		} else {
			
		}
		
		LinkedList<ResultTuple> RT = new LinkedList<ResultTuple>();
		
		FileInputStream imageStream = null;
		try {
			// That's for Lucene v3.0+
			IndexReader reader = IndexReader.open(FSDirectory.open(new File(pathOfTheContent + "/index/")));
			// three different possible versions ... for finding the 10 most
			// relevant pictures

			ImageSearcher searcher = ImageSearcherFactory.createNineWeightedFeatureImageSearcher(numberrHits, weightSC, weightCL, weightEH, weightAC, weightCEDD, weightFCTH, weightG, weightSH, weightT);
			imageStream = new FileInputStream(inputPicture);
			BufferedImage bimg = ImageIO.read(imageStream);
			ImageSearchHits hits = null;
			hits = searcher.search(bimg, reader);
			for (int i = 0; i < numberrHits; i++) {
				RT.add(new ResultTuple(pathOfTheContent + hits.doc(i).get(DocumentBuilder.FIELD_NAME_IDENTIFIER), 1.0 - hits.score(i)));
			}
		} catch (CorruptIndexException ex) {
			return null;
		} catch (IOException ex) {
			return null;
		} finally {
			try {
				imageStream.close();
			} catch (IOException ex) {
			}
		}

	
       
       
       
       

       MpegQueryType mpq = MpqBuilder.buildResultMPQF();

        if (mpq.getQuery().getOutput() == null) {
            mpq.getQuery().setOutput(new OutputQueryType());
        }

        List<ResultItemType> resultItmes = mpq.getQuery().getOutput().getResultItem();


        String repository = "LIRE";


        for (int i = 1; i <= RT.size(); i++) {
            ResultItemType rIt = new ResultItemType();
            rIt.setOriginID(repository);
            rIt.setRecordNumber(BigInteger.valueOf(i));

            List<Thumbnail> thumbs = rIt.getThumbnail();
            Thumbnail thumb = new Thumbnail();
            thumb.setFromREF(repository);
			thumb.setValue("file://"+System.getProperty("user.dir")+"/"+RT.get(i-1).getImagePath());
            thumbs.add(thumb);

            List<MediaResource> resources = rIt.getMediaResource();
            MediaResource res = new MediaResource();
            res.setFromREF(repository);
            res.setValue("file://"+System.getProperty("user.dir")+"/"+RT.get(i-1).getImagePath());
            resources.add(res);

            resultItmes.add(rIt);
        }

        return mpq;
    }

    }

